name: CI_CD

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:

jobs:
  quality-security:
    name: Code Quality and Security scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.33.0
        with:
          scan-type: fs
          scan-ref: .

  docker-release:
    name: Build and Release Docker
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      attestations: write
      id-token: write
    needs: [quality-security]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Compute image name
        id: meta
        run: |
          IMAGE_NAME="ghcr.io/$(echo "$GITHUB_REPOSITORY" | tr '[:upper:]' '[:lower:]')"
          echo "IMAGE_NAME=$IMAGE_NAME" >> "$GITHUB_ENV"

      - name: Build Docker image
        run: |
          docker build -t "$IMAGE_NAME:latest" -t "$IMAGE_NAME:${{ github.run_number }}" .

      - name: Push Docker image
        run: |
          docker push "$IMAGE_NAME:latest"
          docker push "$IMAGE_NAME:${{ github.run_number }}"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ github.run_number }}
          name: "Release v${{ github.run_number }}"
          body: |
            generated github release
            - Docker image: ${{ env.IMAGE_NAME }}:latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy:
    name: Deploy to VPS
    runs-on: ubuntu-latest
    needs: [ docker-release ]
    steps:
      - name: Deploy over SSH
        uses: appleboy/ssh-action@v1.2.0
        env:
          GH_USER: ${{ github.actor }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_REPO: ${{ github.repository }}
          # Optionnel: dÃ©finis APP_PORT dans "Repository variables" (Settings > Variables) pour chaque repo
          APP_PORT: ${{ vars.APP_PORT }}
        with:
          host: ${{ secrets.VPS_HOST }}
          username: deployer
          key: ${{ secrets.VPS_SSH_KEY }}
          envs: GH_USER,GH_TOKEN,GH_REPO,APP_PORT
          script: |
            set -euo pipefail

            echo "Logging into GitHub Container Registry..."
            echo "$GH_TOKEN" | docker login ghcr.io -u "$GH_USER" --password-stdin

            # Nom d'app = nom du repo en lowercase (ex: portfolio, ecrireback, etc.)
            APP_NAME="$(basename "$GH_REPO" | tr '[:upper:]' '[:lower:]')"
            IMAGE_NAME="ghcr.io/$(echo "$GH_REPO" | tr '[:upper:]' '[:lower:]')"
            PORT="${APP_PORT:-2425}"

            echo "Using image: $IMAGE_NAME:latest"
            echo "App name: $APP_NAME"
            echo "App port: $PORT"

            # Arborescence multi-apps pour Caddy
            BASE_DIR="$HOME/apps/$APP_NAME"
            mkdir -p "$BASE_DIR"/{data,logs}

            echo "Pulling the latest image..."
            docker pull "$IMAGE_NAME:latest"

            echo "Stopping and removing the old container if exists..."
            docker stop "$APP_NAME" || true
            docker rm "$APP_NAME" || true

            echo "Starting the new container..."
            docker run -d \
              --name "$APP_NAME" \
              --restart unless-stopped \
              -p 127.0.0.1:"$PORT":80 \
              -v "$BASE_DIR/data":/data \
              -v "$BASE_DIR/logs":/var/log/app \
              "$IMAGE_NAME:latest"

            echo "Container '$APP_NAME' is running on 127.0.0.1:$PORT (for Caddy)."

            echo "Logging out from GitHub Container Registry..."
            docker logout ghcr.io